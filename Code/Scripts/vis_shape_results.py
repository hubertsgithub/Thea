import argparse
from functools import partial
import multiprocessing
import os
import subprocess


# Generate image retrieval results for each shape based on the 2D-3D material
# aware features. We generate retrievals for each sampled 3D point of a shape
# where we computed 3D features.

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dataset_dir', default='/mnt/data/projects/finegrained/code/mattrans/mattrans-cpp-pipeline/data/benchmark', help='Directory that contains the dataset (shapes and images).')
    parser.add_argument('--experiment_dir', default='/mnt/data/projects/finegrained/code/mattrans/mattrans-cpp-pipeline/data/experiments', help='Directory that contains intermediate outputs generated by the .')
    args = parser.parse_args()

    os.chdir('../Build')
    gen_html_results(args)


def gen_html_func(shape_id, args):
    cmd_args = [
        'Output/bin/MatTrans',
        os.path.join(args.dataset_dir, 'models/%s/model.obj' % shape_id),
        '-f', os.path.join(args.experiment_dir, '3D_feats/%s.feat' % shape_id),
        '--dataset-dir', args.dataset_dir,
        '--experiment-dir', args.experiment_dir,
        '--shape-data', os.path.join(args.experiment_dir, 'JSON/shape_data-%s.json' % shape_id),
        '--gen-html', 'true',
    ]
    try:
        subprocess.check_call(cmd_args)
    except Exception, e:
        print e


def gen_html_results(args):
    shape_count = 108

    shape_ids = [
        'benchmark_%.6d' % (i+1)
        for i in xrange(shape_count)
    ]
    partial_gen_html_func = partial(gen_html_func, args=args)

    n_proc = multiprocessing.cpu_count() - 1
    pool = multiprocessing.Pool(processes=n_proc)
    for i, _ in enumerate(pool.imap_unordered(partial_gen_html_func, shape_ids), 1):
        print 'done %.0f%%' % (float(i) / len(shape_ids) * 100)

    pool.close()
    pool.join()


if __name__ == '__main__':
    main()
